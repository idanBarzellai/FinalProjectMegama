//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Unused/testInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""testInputs"",
    ""maps"": [
        {
            ""name"": ""CharctersControls"",
            ""id"": ""ee5a35c3-2675-4d86-83f6-652163bdf5ec"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5a6dce19-ee22-4f39-b55a-ac161666746c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""732c5071-659f-486d-bef7-5c10accae315"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4be918ee-11d6-49c0-9838-a76a0a1ae665"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""84cbaf5e-812e-433c-8c44-0ee6083947dd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""52407f04-1805-439c-a24c-7dc8976759eb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8ec0799c-b3c0-4d80-9083-a9282b31de8f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6097bfba-073b-40bb-95f2-106922749217"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""99150b1b-2a32-4c3c-8cfc-358e3c6a7dd6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d8f9fa3c-2a21-4eb1-9a17-4da579c4b88f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharctersControls
        m_CharctersControls = asset.FindActionMap("CharctersControls", throwIfNotFound: true);
        m_CharctersControls_Move = m_CharctersControls.FindAction("Move", throwIfNotFound: true);
        m_CharctersControls_Run = m_CharctersControls.FindAction("Run", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharctersControls
    private readonly InputActionMap m_CharctersControls;
    private ICharctersControlsActions m_CharctersControlsActionsCallbackInterface;
    private readonly InputAction m_CharctersControls_Move;
    private readonly InputAction m_CharctersControls_Run;
    public struct CharctersControlsActions
    {
        private @TestInputs m_Wrapper;
        public CharctersControlsActions(@TestInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharctersControls_Move;
        public InputAction @Run => m_Wrapper.m_CharctersControls_Run;
        public InputActionMap Get() { return m_Wrapper.m_CharctersControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharctersControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICharctersControlsActions instance)
        {
            if (m_Wrapper.m_CharctersControlsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharctersControlsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharctersControlsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharctersControlsActionsCallbackInterface.OnMove;
                @Run.started -= m_Wrapper.m_CharctersControlsActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_CharctersControlsActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_CharctersControlsActionsCallbackInterface.OnRun;
            }
            m_Wrapper.m_CharctersControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }
        }
    }
    public CharctersControlsActions @CharctersControls => new CharctersControlsActions(this);
    public interface ICharctersControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
}
